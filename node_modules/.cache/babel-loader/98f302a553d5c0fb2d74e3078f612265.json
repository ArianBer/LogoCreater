{"ast":null,"code":"import { useMutation as useReactMutation, useQuery as useReactQuery } from \"react-query\";\nexport function createUseMutation(instance) {\n  var _s = $RefreshSig$();\n\n  const mutationFetchers = instance.fetchers.mutations;\n\n  const useMutation = (key, options) => {\n    _s();\n\n    return useReactMutation(key, mutationFetchers[key], options);\n  };\n\n  _s(useMutation, \"3LjT7iTwc8jhrnK/DBMzvzAD9zU=\", false, function () {\n    return [useReactMutation];\n  });\n\n  return useMutation;\n}\nexport function createUseQuery(instance) {\n  var _s2 = $RefreshSig$();\n\n  const queryFetchers = instance.fetchers.queries;\n\n  function useQuery(key, params, options) {\n    _s2();\n\n    return useReactQuery(key, () => queryFetchers[key].apply(null, params), // @ts-ignore\n    options);\n  }\n\n  _s2(useQuery, \"P0vA4/N1VgC5kbFJmaZ/s+6NF30=\", false, function () {\n    return [useReactQuery];\n  });\n\n  return useQuery;\n}","map":{"version":3,"sources":["/Users/elmedinbrahimi/Desktop/LogoCreater/src/lib/hooks/builder/react-query.ts"],"names":["useMutation","useReactMutation","useQuery","useReactQuery","createUseMutation","instance","mutationFetchers","fetchers","mutations","key","options","createUseQuery","queryFetchers","queries","params","apply"],"mappings":"AAAA,SAEEA,WAAW,IAAIC,gBAFjB,EAIEC,QAAQ,IAAIC,aAJd,QAOO,aAPP;AAeA,OAAO,SAASC,iBAAT,CACLC,QADK,EAEL;AAAA;;AACA,QAAMC,gBAAgB,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,SAA3C;;AAIA,QAAMR,WAAW,GAAG,CAKlBS,GALkB,EAMlBC,OANkB,KAOf;AAAA;;AACH,WAAOT,gBAAgB,CACrBQ,GADqB,EAErBH,gBAAgB,CAACG,GAAD,CAFK,EAGrBC,OAHqB,CAAvB;AAKD,GAbD;;AALA,KAKMV,WALN;AAAA,YAaSC,gBAbT;AAAA;;AAoBA,SAAOD,WAAP;AACD;AAED,OAAO,SAASW,cAAT,CACLN,QADK,EAEL;AAAA;;AACA,QAAMO,aAAa,GAAGP,QAAQ,CAACE,QAAT,CAAkBM,OAAxC;;AAIA,WAASX,QAAT,CAKEO,GALF,EAKYK,MALZ,EAK4BJ,OAL5B,EAKqE;AAAA;;AACnE,WAAOP,aAAa,CAClBM,GADkB,EAElB,MAAMG,aAAa,CAACH,GAAD,CAAb,CAAmBM,KAAnB,CAAyB,IAAzB,EAA+BD,MAA/B,CAFY,EAGlB;AACAJ,IAAAA,OAJkB,CAApB;AAMD;;AAjBD,MAKSR,QALT;AAAA,YAWSC,aAXT;AAAA;;AAmBA,SAAOD,QAAP;AACD","sourcesContent":["import {\n  MutationFunction,\n  useMutation as useReactMutation,\n  UseMutationOptions,\n  useQuery as useReactQuery,\n  UseQueryOptions,\n  UseQueryResult,\n} from \"react-query\";\nimport { UnknownInstance } from \"./builder\";\n\n/**\n * @internal\n */\nexport type Await<T> = T extends Promise<infer U> ? U : T;\n\nexport function createUseMutation<TInstance extends UnknownInstance>(\n  instance: TInstance\n) {\n  const mutationFetchers = instance.fetchers.mutations;\n  type MutationKeys = keyof TInstance[\"fetchers\"][\"mutations\"] & string;\n  type MutationFetchers = TInstance[\"fetchers\"][\"mutations\"];\n\n  const useMutation = <\n    TKey extends MutationKeys,\n    TVariables = Parameters<MutationFetchers[TKey]>[0],\n    TData = Await<ReturnType<MutationFetchers[TKey]>>\n  >(\n    key: TKey,\n    options?: UseMutationOptions<TData, unknown, TVariables>\n  ) => {\n    return useReactMutation(\n      key,\n      mutationFetchers[key] as unknown as MutationFunction<TData, TVariables>,\n      options\n    );\n  };\n\n  return useMutation;\n}\n\nexport function createUseQuery<TInstance extends UnknownInstance>(\n  instance: TInstance\n) {\n  const queryFetchers = instance.fetchers.queries;\n  type QueryKeys = keyof TInstance[\"fetchers\"][\"queries\"] & string;\n  type Fetchers = TInstance[\"fetchers\"][\"queries\"];\n\n  function useQuery<\n    Key extends QueryKeys,\n    Options extends UseQueryOptions<Data>,\n    Params extends Parameters<Fetchers[Key]>,\n    Data = Await<ReturnType<Fetchers[Key]>>\n  >(key: Key, params: Params, options?: Options): UseQueryResult<Data> {\n    return useReactQuery(\n      key,\n      () => queryFetchers[key].apply(null, params),\n      // @ts-ignore\n      options\n    );\n  }\n\n  return useQuery;\n}\n"]},"metadata":{},"sourceType":"module"}