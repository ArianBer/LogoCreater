{"ast":null,"code":"var _jsxFileName = \"/Users/elmedinbrahimi/Desktop/LogoCreater/src/routes/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Route, useLocation, Redirect } from \"react-router-dom\";\nimport { useAuthContext } from \"../lib/context/AuthContext/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PrivateRoute = props => {\n  _s();\n\n  const authCtx = useAuthContext();\n  const location = useLocation();\n\n  if (!authCtx.isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `login?redirect=${encodeURIComponent(location.pathname)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PrivateRoute, \"m+APvXhOC+FKrEOi7PRi/5LZ/Dw=\", false, function () {\n  return [useAuthContext, useLocation];\n});\n\n_c = PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/elmedinbrahimi/Desktop/LogoCreater/src/routes/PrivateRoute.tsx"],"names":["React","Route","useLocation","Redirect","useAuthContext","PrivateRoute","props","authCtx","location","isAuthenticated","encodeURIComponent","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAA4BC,WAA5B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,SAASC,cAAT,QAA+B,wCAA/B;;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAuB;AAAA;;AACjD,QAAMC,OAAO,GAAGH,cAAc,EAA9B;AACA,QAAMI,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,MAAI,CAACK,OAAO,CAACE,eAAb,EAA8B;AAC5B,wBACE,QAAC,QAAD;AACE,MAAA,EAAE,EAAG,kBAAiBC,kBAAkB,CAACF,QAAQ,CAACG,QAAV,CAAoB;AAD9D;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBAAO,QAAC,KAAD,OAAWL;AAAX;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAbM;;GAAMD,Y;UACKD,c,EACCF,W;;;KAFNG,Y","sourcesContent":["import React from \"react\"\nimport { Route, RouteProps, useLocation, Redirect } from \"react-router-dom\"\nimport { useAuthContext } from \"../lib/context/AuthContext/AuthContext\"\nexport const PrivateRoute = (props: RouteProps) => {\n  const authCtx = useAuthContext()\n  const location = useLocation()\n\n  if (!authCtx.isAuthenticated) {\n    return (\n      <Redirect\n        to={`login?redirect=${encodeURIComponent(location.pathname)}`}\n      />\n    )\n  }\n\n  return <Route {...props} />\n}\n"]},"metadata":{},"sourceType":"module"}