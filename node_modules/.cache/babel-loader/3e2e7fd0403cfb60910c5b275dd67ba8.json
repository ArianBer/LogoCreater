{"ast":null,"code":"/**\n * @internal\n */\n\n/**\n * @internal\n */\nexport class QueryBuilder {\n  constructor(options = {}) {\n    var _options$queries, _options$mutations;\n\n    this.fetchers = void 0;\n    this.fetchers = {\n      queries: (_options$queries = options === null || options === void 0 ? void 0 : options.queries) !== null && _options$queries !== void 0 ? _options$queries : Object.create(null),\n      mutations: (_options$mutations = options === null || options === void 0 ? void 0 : options.mutations) !== null && _options$mutations !== void 0 ? _options$mutations : Object.create(null)\n    };\n  }\n\n  query(key, func) {\n    return new QueryBuilder({ ...this.fetchers,\n      queries: { ...this.fetchers.queries,\n        [key]: func\n      }\n    });\n  }\n\n  mutation(key, func) {\n    return new QueryBuilder({ ...this.fetchers,\n      mutations: { ...this.fetchers.mutations,\n        [key]: func\n      }\n    });\n  }\n\n  merge(builderInstance) {\n    return new QueryBuilder({\n      queries: { ...this.fetchers.queries,\n        ...builderInstance.fetchers.queries\n      },\n      mutations: { ...this.fetchers.mutations,\n        ...builderInstance.fetchers.mutations\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/elmedinbrahimi/Desktop/LogoCreater/src/lib/hooks/builder/builder.ts"],"names":["QueryBuilder","constructor","options","fetchers","queries","Object","create","mutations","query","key","func","mutation","merge","builderInstance"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA,OAAO,MAAMA,YAAN,CAAyC;AAM9CC,EAAAA,WAAW,CAACC,OAAuD,GAAG,EAA3D,EAA+D;AAAA;;AAAA,SALjEC,QAKiE;AACxE,SAAKA,QAAL,GAAgB;AACdC,MAAAA,OAAO,sBAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,OAAZ,+DAAuBC,MAAM,CAACC,MAAP,CAAc,IAAd,CADhB;AAEdC,MAAAA,SAAS,wBAAGL,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEK,SAAZ,mEAAyBF,MAAM,CAACC,MAAP,CAAc,IAAd;AAFpB,KAAhB;AAID;;AAEME,EAAAA,KAAK,CACVC,GADU,EAEVC,IAFU,EASV;AACA,WAAO,IAAIV,YAAJ,CAAiB,EACtB,GAAG,KAAKG,QADc;AAEtBC,MAAAA,OAAO,EAAE,EACP,GAAG,KAAKD,QAAL,CAAcC,OADV;AAEP,SAACK,GAAD,GAAOC;AAFA;AAFa,KAAjB,CAAP;AAaD;;AAEMC,EAAAA,QAAQ,CACbF,GADa,EAEbC,IAFa,EASb;AACA,WAAO,IAAIV,YAAJ,CAAiB,EACtB,GAAG,KAAKG,QADc;AAEtBI,MAAAA,SAAS,EAAE,EACT,GAAG,KAAKJ,QAAL,CAAcI,SADR;AAET,SAACE,GAAD,GAAOC;AAFE;AAFW,KAAjB,CAAP;AAaD;;AAEME,EAAAA,KAAK,CACVC,eADU,EAKV;AACA,WAAO,IAAIb,YAAJ,CAAiB;AACtBI,MAAAA,OAAO,EAAE,EACP,GAAG,KAAKD,QAAL,CAAcC,OADV;AAEP,WAAGS,eAAe,CAACV,QAAhB,CAAyBC;AAFrB,OADa;AAKtBG,MAAAA,SAAS,EAAE,EACT,GAAG,KAAKJ,QAAL,CAAcI,SADR;AAET,WAAGM,eAAe,CAACV,QAAhB,CAAyBI;AAFnB;AALW,KAAjB,CAAP;AAUD;;AA/E6C","sourcesContent":["/**\n * @internal\n */\nexport type UnknownInstance = QueryBuilder<any, any>;\n\n/**\n * @internal\n */\nexport class QueryBuilder<TQueries, TMutations> {\n  readonly fetchers: Readonly<{\n    queries: TQueries;\n    mutations: TMutations;\n  }>;\n\n  constructor(options: { queries?: TQueries; mutations?: TMutations } = {}) {\n    this.fetchers = {\n      queries: (options?.queries ?? Object.create(null)) as TQueries,\n      mutations: (options?.mutations ?? Object.create(null)) as TMutations,\n    };\n  }\n\n  public query<TKey extends string, TFunc extends Function>(\n    key: TKey,\n    func: TFunc\n  ): QueryBuilder<\n    TQueries &\n      {\n        [key in typeof key]: typeof func;\n      },\n    TMutations\n  > {\n    return new QueryBuilder({\n      ...this.fetchers,\n      queries: {\n        ...this.fetchers.queries,\n        [key]: func,\n      },\n    }) as QueryBuilder<\n      TQueries &\n        {\n          [key in typeof key]: typeof func;\n        },\n      TMutations\n    >;\n  }\n\n  public mutation<TKey extends Readonly<string>, TFunc extends Function>(\n    key: TKey,\n    func: TFunc\n  ): QueryBuilder<\n    TQueries,\n    TMutations &\n      {\n        [key in TKey]: TFunc;\n      }\n  > {\n    return new QueryBuilder({\n      ...this.fetchers,\n      mutations: {\n        ...this.fetchers.mutations,\n        [key]: func,\n      },\n    }) as QueryBuilder<\n      TQueries,\n      TMutations &\n        {\n          [key in TKey]: TFunc;\n        }\n    >;\n  }\n\n  public merge<TBuilderInstance extends UnknownInstance>(\n    builderInstance: TBuilderInstance\n  ): QueryBuilder<\n    TQueries & TBuilderInstance[\"fetchers\"][\"queries\"],\n    TMutations & TBuilderInstance[\"fetchers\"][\"mutations\"]\n  > {\n    return new QueryBuilder({\n      queries: {\n        ...this.fetchers.queries,\n        ...builderInstance.fetchers.queries,\n      },\n      mutations: {\n        ...this.fetchers.mutations,\n        ...builderInstance.fetchers.mutations,\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}